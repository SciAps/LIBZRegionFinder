/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sciaps.view;

import com.sciaps.common.CheckListShotItem;
import com.sciaps.common.Constants;
import com.sciaps.common.RegionMarkerItem;
import com.sciaps.view.LibzShotCheckListPanel.LibzShotItemClickListenerCallback;
import com.sciaps.common.ThreadUtils;
import com.sciaps.common.data.Region;
import com.sciaps.common.spectrum.LIBZPixelSpectrum;
import com.sciaps.common.spectrum.Spectrum;
import com.sciaps.common.swing.listener.LibzChartMouseListener;
import com.sciaps.common.swing.listener.LibzChartMouseListener.LibzChartMouseListenerCallback;
import com.sciaps.common.swing.view.JFreeChartWrapperPanel;
import com.sciaps.common.webserver.ILaserController.RasterParams;
import static com.sciaps.utils.Util.createAverage;
import com.sciaps.view.RegionsPanel.RegionsPanelCallback;
import java.io.IOException;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeriesCollection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author jchen
 */
public class SpectrometerStackPanel extends javax.swing.JPanel
        implements RegionsPanelCallback, LibzChartMouseListenerCallback, LibzShotItemClickListenerCallback {

    private final Logger logger_ = LoggerFactory.getLogger(SpectrometerStackPanel.class);

    private final XYSeriesCollection xySeriesCollection_;
    private JFreeChartWrapperPanel jFreeChartPanel_;
    private LibzChartMouseListener libzChartMouseListener_;
    private RegionsPanel regionPanels_;
    private LibzShotCheckListPanel shotCheckListPanel_;
    private final SpecialRasterPanel specialRasterPanel_;

    boolean bTestInProgress_;
    private int scanCount_ = 0;

    /**
     * Creates new form SpecktrometerStackPanel
     */
    public SpectrometerStackPanel() {
        initComponents();

        regionPanels_ = new RegionsPanel(this);
        regionContainerPanel_.add(regionPanels_);

        progbarRasterTest_.setVisible(false);
        progbarRasterTest_.setValue(0);
        bTestInProgress_ = false;

        specialRasterPanel_ = new SpecialRasterPanel();
        rasterSettingPanel_.add(specialRasterPanel_);

        xySeriesCollection_ = new XYSeriesCollection();
        jFreeChartPanel_ = new JFreeChartWrapperPanel();
        jFreeChartPanel_.populateSpectrumChartWithAbstractXYDataset(
                xySeriesCollection_, "Spectro Meter Stack", "Wave Length", "Intensity");
        displayPanel_.add(jFreeChartPanel_);

        libzChartMouseListener_ = new LibzChartMouseListener(
                jFreeChartPanel_.getChartPanel(),
                jFreeChartPanel_.getJFreeChart(),
                this, this);

        //TODO
        //jFreeChartPanel_.getChartPanel().addChartMouseListener(libzChartMouseListener_);
        shotCheckListPanel_ = new LibzShotCheckListPanel(this);
        shotListContainerPanel_.add(shotCheckListPanel_);

        // diable them by default
        shotListContainerPanel_.setVisible(false);
        rasterSettingPanel_.setVisible(false);
        regionContainerPanel_.setVisible(false);
        toggleShotList_.setEnabled(false);
        toggleRegion_.setEnabled(false);

        // ==== start of testing code
        for (int i = 1; i <= 200; i++) {
            shotCheckListPanel_.addItem(new CheckListShotItem(scanCount_, i));
        }
        toggleShotList_.setEnabled(true);
        toggleRegion_.setEnabled(true);
        //shotCheckListPanel_.doCreateScanAvg(0);

        XYPlot plot = jFreeChartPanel_.getJFreeChart().getXYPlot();
        org.jfree.chart.axis.ValueAxis rangeAxis = plot.getRangeAxis();
        org.jfree.chart.axis.ValueAxis domainAxis = plot.getDomainAxis();
        rangeAxis.setRange(0, 1000);
        domainAxis.setRange(0, 1000);
        // ==== end of testing code

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        displayPanel_ = new javax.swing.JPanel();
        regionContainerPanel_ = new javax.swing.JPanel();
        controlPanel_ = new javax.swing.JPanel();
        progbarRasterTest_ = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        toggleShotList_ = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        toggleRasterSetting_ = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        toggleRegion_ = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnScan_ = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        rasterSettingPanel_ = new javax.swing.JPanel();
        shotListContainerPanel_ = new javax.swing.JPanel();

        setName(""); // NOI18N
        setLayout(new java.awt.GridBagLayout());

        displayPanel_.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        displayPanel_.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(displayPanel_, gridBagConstraints);

        regionContainerPanel_.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        regionContainerPanel_.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(regionContainerPanel_, gridBagConstraints);

        controlPanel_.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        controlPanel_.setLayout(new java.awt.GridBagLayout());

        progbarRasterTest_.setMaximumSize(new java.awt.Dimension(100, 14));
        progbarRasterTest_.setMinimumSize(new java.awt.Dimension(100, 14));
        progbarRasterTest_.setOpaque(true);
        progbarRasterTest_.setPreferredSize(new java.awt.Dimension(100, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        controlPanel_.add(progbarRasterTest_, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        controlPanel_.add(jLabel1, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        toggleShotList_.setText("Show");
        toggleShotList_.setMaximumSize(new java.awt.Dimension(120, 30));
        toggleShotList_.setMinimumSize(new java.awt.Dimension(120, 30));
        toggleShotList_.setPreferredSize(new java.awt.Dimension(120, 30));
        toggleShotList_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleShotList_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel1.add(toggleShotList_, gridBagConstraints);

        jLabel2.setText("Shot List");
        jPanel1.add(jLabel2, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        controlPanel_.add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        toggleRasterSetting_.setText("Show");
        toggleRasterSetting_.setMaximumSize(new java.awt.Dimension(120, 30));
        toggleRasterSetting_.setMinimumSize(new java.awt.Dimension(120, 30));
        toggleRasterSetting_.setPreferredSize(new java.awt.Dimension(120, 30));
        toggleRasterSetting_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleRasterSetting_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(toggleRasterSetting_, gridBagConstraints);

        jLabel3.setText("Raster Setting");
        jPanel2.add(jLabel3, new java.awt.GridBagConstraints());

        controlPanel_.add(jPanel2, new java.awt.GridBagConstraints());

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        toggleRegion_.setText("Show");
        toggleRegion_.setMaximumSize(new java.awt.Dimension(120, 30));
        toggleRegion_.setMinimumSize(new java.awt.Dimension(120, 30));
        toggleRegion_.setPreferredSize(new java.awt.Dimension(120, 30));
        toggleRegion_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleRegion_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(toggleRegion_, gridBagConstraints);

        jLabel4.setText("Region List");
        jPanel3.add(jLabel4, new java.awt.GridBagConstraints());

        controlPanel_.add(jPanel3, new java.awt.GridBagConstraints());

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        btnScan_.setBackground(new java.awt.Color(0, 255, 51));
        btnScan_.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnScan_.setText("SCAN");
        btnScan_.setMaximumSize(new java.awt.Dimension(120, 30));
        btnScan_.setMinimumSize(new java.awt.Dimension(120, 30));
        btnScan_.setPreferredSize(new java.awt.Dimension(120, 30));
        btnScan_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScan_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(btnScan_, gridBagConstraints);

        jLabel5.setText("Raster Test");
        jPanel4.add(jLabel5, new java.awt.GridBagConstraints());

        controlPanel_.add(jPanel4, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        add(controlPanel_, gridBagConstraints);

        rasterSettingPanel_.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        rasterSettingPanel_.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(rasterSettingPanel_, gridBagConstraints);

        shotListContainerPanel_.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        shotListContainerPanel_.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(shotListContainerPanel_, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnScan_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScan_ActionPerformed
        prepareForRasterTest();
    }//GEN-LAST:event_btnScan_ActionPerformed

    private void toggleShotList_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleShotList_ActionPerformed
        setShotListPanelVisible(toggleShotList_.isSelected());
    }//GEN-LAST:event_toggleShotList_ActionPerformed

    private void toggleRasterSetting_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleRasterSetting_ActionPerformed

        setRasterSettingPanelVisible(toggleRasterSetting_.isSelected());
    }//GEN-LAST:event_toggleRasterSetting_ActionPerformed

    private void toggleRegion_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleRegion_ActionPerformed
        setRegionPanelVisible(toggleRegion_.isSelected());
    }//GEN-LAST:event_toggleRegion_ActionPerformed

    private void setRegionPanelVisible(boolean val) {
        regionContainerPanel_.setVisible(val);
        toggleRegion_.setSelected(val);
        if (val == true) {
            toggleRegion_.setText("Hide");
        } else {
            toggleRegion_.setText("Show");
        }
    }

    private void setRasterSettingPanelVisible(boolean val) {
        rasterSettingPanel_.setVisible(val);
        toggleRasterSetting_.setSelected(val);
        if (val == true) {
            toggleRasterSetting_.setText("Hide");
        } else {
            toggleRasterSetting_.setText("Show");
        }
    }

    private void setShotListPanelVisible(boolean val) {
        shotListContainerPanel_.setVisible(val);
        toggleShotList_.setSelected(val);
        if (val == true) {
            toggleShotList_.setText("Hide");
        } else {
            toggleShotList_.setText("Show");
        }
    }

    public void showSpecialRasterDisplay() {
        specialRasterPanel_.showPopup();
    }

    private void prepareForRasterTest() {

        RasterParams rasterData = specialRasterPanel_.getRasterData();
        int sampleRate = shotCheckListPanel_.getSampleRate();
        if (sampleRate < 1) {
            return;
        }

        if (rasterData != null) {

            ThreadUtils.IOThreads.execute(new Runnable() {

                @Override
                public void run() {
                    startRasterTest(rasterData, sampleRate);
                }
            });

            ThreadUtils.CPUThreads.execute(new Runnable() {

                @Override
                public void run() {
                    int i = 0;

                    progbarRasterTest_.setVisible(true);

                    while (bTestInProgress_) {
                        progbarRasterTest_.setValue(i);
                        try {
                            Thread.sleep(1000);

                            // assumming the test will be done within 9 seconds
                            if (i <= 80) {
                                i += 2;
                            }
                        } catch (InterruptedException ex) {
                            //logger_.error("Thread sleep failed");
                        }
                    }

                    progbarRasterTest_.setVisible(false);
                    progbarRasterTest_.setValue(0);
                }
            });
        }
    }

    private void startRasterTest(RasterParams rasterData, int sampleRate) {
        logger_.info("Starting a raster test");

        btnScan_.setEnabled(false);
        setShotListPanelVisible(false);
        setRasterSettingPanelVisible(false);
        setRegionPanelVisible(false);
        toggleShotList_.setEnabled(false);
        toggleRegion_.setEnabled(false);
        bTestInProgress_ = true;

        // Remove any current shots
        //shotCheckListPanel_.removeAllItem();
        // Remove any current series data
        //xySeriesCollection_.removeAllSeries();
        // Reset the bounds incase it is zoomed in/out
        jFreeChartPanel_.getChartPanel().restoreAutoBounds();

        try {

            List<LIBZPixelSpectrum> shots = Constants.mHttpClient.rasterTest(rasterData);

            if (shots != null && !shots.isEmpty()) {

                scanCount_++;

                int shotCount = 1;
                for (LIBZPixelSpectrum shot : shots) {

                    CheckListShotItem item = new CheckListShotItem(scanCount_, shotCount);
                    item.setShot(shot);

                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            shotCheckListPanel_.addItem(item);
                        }
                    });

                    shotCount++;
                }

                // Okay, theres data, enable them
                setShotListPanelVisible(true);
                toggleShotList_.setEnabled(true);
                toggleRegion_.setEnabled(true);

                Spectrum avgSpectrum = createAverage(shots, sampleRate);
                CheckListShotItem avgShotItem = new CheckListShotItem();
                avgShotItem.setName("Scan " + scanCount_ + ": Avg");
                avgShotItem.setShot(avgSpectrum);
                getSpectrumPixelXYSeries(avgShotItem);

                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        shotCheckListPanel_.addItem(0, avgShotItem);
                        xySeriesCollection_.addSeries(avgShotItem.getXYSeries());
                    }
                });

                logger_.info("Raster test completed.");

            } else {
                bTestInProgress_ = false;
                logger_.error("Raster test failed, no returned data from Libz unit.");
                JOptionPane.showMessageDialog(null,
                        "Raster test failed, no returned data from Libz unit.",
                        "Raster Test", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException ex) {
            bTestInProgress_ = false;
            logger_.error("Raster test failed: " + ex.getMessage());
            JOptionPane.showMessageDialog(null,
                    "Raster Test Failed. " + ex.getMessage(),
                    "Raster Test", JOptionPane.ERROR_MESSAGE);
        }

        btnScan_.setEnabled(true);
        bTestInProgress_ = false;
    }

    private void getSpectrumPixelXYSeries(CheckListShotItem shotItem) {

        double[] x = shotItem.getShot().getPixelLocations();
        double[] y = new double[x.length];
        UnivariateFunction yfun = shotItem.getShot().getIntensityFunction();
        for (int i = 0; i < x.length; i++) {
            y[i] = yfun.value(x[i]);
        }

        for (int i = 0; i < x.length; i++) {
            shotItem.getXYSeries().add(x[i], y[i]);
        }
    }

    public void getRegionTextFromUser() {
        boolean iValide = true;
        StringBuilder errText = new StringBuilder();

        String retval = JOptionPane.showInputDialog(null,
                "Enter region string:",
                "Fe371.76-472.16,480.85-480.15,Co257.88-258.12,324.4-325,Ni341.05-341.7,359.05-359.6,334.67-335.15,394.1-394.7");

        if (!retval.isEmpty()) {
            String[] regions = retval.split(",");

            for (String region : regions) {

                try {
                    Region r = Region.parse(region);
                    if (r != null) {

                        RegionMarkerItem markerItem = new RegionMarkerItem();

                        markerItem.setName(r.name);
                        if (r.getElement() != null && r.getElement().symbol != null) {
                            markerItem.setSymbol(r.getElement().symbol);
                        } else {
                            markerItem.setSymbol("");
                        }
                        markerItem.setMin(r.wavelengthRange.getMinimumDouble());
                        markerItem.setMax(r.wavelengthRange.getMaximumDouble());
                        markerItem.setValue(0);

                        regionPanels_.addRow(markerItem);
                    }
                } catch (Exception ex) {
                    errText.append(region);
                    errText.append(" ");
                    iValide = false;
                }
            }

            if (iValide == false) {
                JOptionPane.showMessageDialog(null, "Input contains invalid data:\n" + errText);
            }
            setRegionPanelVisible(true);
        }
    }

    @Override
    public void doShowShotXYSeries(com.sciaps.common.CheckListShotItem item) {

        ThreadUtils.CPUThreads.execute(new Runnable() {
            @Override
            public void run() {
                logger_.info("Displaying selected shot");
                if (item.getXYSeries().isEmpty()) {
                    getSpectrumPixelXYSeries(item);
                }

                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            xySeriesCollection_.addSeries(item.getXYSeries());
                        } catch (Exception ex) {
                            logger_.error("Failed to Add XYSeries: " + ex.getMessage());
                        }
                    }
                });
            }
        });

    }

    @Override
    public void doRemoveShotXYSeries(com.sciaps.common.CheckListShotItem item) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    xySeriesCollection_.removeSeries(item.getXYSeries());
                } catch (Exception ex) {
                    logger_.error("Failed to remove XYSeries: " + ex.getMessage());
                }
            }
        });
    }

    @Override
    public void addRegion(String regionName, double wavelengthMin, double wavelengthMax, Marker... associatedMarkers) {

        System.out.println(associatedMarkers.toString());
        RegionMarkerItem markerItem = new RegionMarkerItem();
        markerItem.setName(regionName);
        markerItem.setSymbol("");
        markerItem.setMin(wavelengthMin);
        markerItem.setMax(wavelengthMax);
        markerItem.setValue(0);

        regionPanels_.addRow(markerItem);
    }

    @Override
    public void onRegionDeleted(String regionName) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void onRegionClicked(String regionName) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void addRegionMarker(Marker marker) {
        jFreeChartPanel_.getJFreeChart().getXYPlot().addDomainMarker(marker);
    }

    @Override
    public void removeRegionMarker(Marker marker) {
        IntervalMarker m = (IntervalMarker) marker;
        System.out.println(m.getStartValue() + "-" + m.getEndValue());
        jFreeChartPanel_.getJFreeChart().getXYPlot().removeDomainMarker(marker);
    }

    @Override
    public int getNumberOfSelectedShots() {
        return shotCheckListPanel_.getNumberOfSelectedItem();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnScan_;
    private javax.swing.JPanel controlPanel_;
    private javax.swing.JPanel displayPanel_;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar progbarRasterTest_;
    private javax.swing.JPanel rasterSettingPanel_;
    private javax.swing.JPanel regionContainerPanel_;
    private javax.swing.JPanel shotListContainerPanel_;
    private javax.swing.JToggleButton toggleRasterSetting_;
    private javax.swing.JToggleButton toggleRegion_;
    private javax.swing.JToggleButton toggleShotList_;
    // End of variables declaration//GEN-END:variables

}
