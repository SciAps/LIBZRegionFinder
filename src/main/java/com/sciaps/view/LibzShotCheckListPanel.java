/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sciaps.view;

import com.sciaps.common.CheckListShotItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author jchen
 */
public class LibzShotCheckListPanel extends javax.swing.JPanel {

    public interface LibzShotItemClickListenerCallback {

        void doShowShotXYSeries(CheckListShotItem item);

        void doRemoveShotXYSeries(CheckListShotItem item);
    }

    private final Logger logger_ = LoggerFactory.getLogger(LibzShotCheckListPanel.class);
    private final DefaultListModel<CheckListShotItem> listModel_;
    private LibzShotItemClickListenerCallback callbackListener_;

    /**
     * List Creates new form LibzListPanel
     *
     * @param callback
     */
    public LibzShotCheckListPanel(LibzShotItemClickListenerCallback callback) {
        initComponents();

        callbackListener_ = callback;

        listModel_ = new DefaultListModel<>();

        lstOfShots_.setCellRenderer(new CheckboxListCellRenderer());
        lstOfShots_.setModel(listModel_);

        lstOfShots_.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent event) {

                if (!event.isControlDown() && !event.isShiftDown()) {

                    JList list = (JList) event.getSource();

                    // Get index of item clicked
                    int index = list.locationToIndex(event.getPoint());

                    CheckListShotItem item = (CheckListShotItem) list.getModel().getElementAt(index);

                    // Toggle selected state
                    item.setSelected(!item.isSelected());

                    if (callbackListener_ != null) {
                        if (item.isSelected()) {
                            callbackListener_.doShowShotXYSeries(item);
                            System.out.println("Selected");
                        } else {
                            callbackListener_.doRemoveShotXYSeries(item);
                            System.out.println("Unselected");
                        }
                    }

                    // Repaint cell
                    list.repaint(list.getCellBounds(index, index));

                    btnCreateAvg_.setEnabled(false);
                } else {
                    btnCreateAvg_.setEnabled(true);
                }
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        lstOfShots_ = new javax.swing.JList();
        btnCreateAvg_ = new javax.swing.JButton();
        btnUncheckAll_ = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDeleteScan_ = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(160, 190));
        setMinimumSize(new java.awt.Dimension(160, 190));
        setPreferredSize(new java.awt.Dimension(160, 190));
        setLayout(new java.awt.GridBagLayout());

        lstOfShots_.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstOfShots_);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        btnCreateAvg_.setText("Create Avg");
        btnCreateAvg_.setEnabled(false);
        btnCreateAvg_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAvg_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(btnCreateAvg_, gridBagConstraints);

        btnUncheckAll_.setText("Uncheck All");
        btnUncheckAll_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAll_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(btnUncheckAll_, gridBagConstraints);

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Shot List:");
        jLabel1.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabel1, gridBagConstraints);

        btnDeleteScan_.setText("Del Scan");
        btnDeleteScan_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteScan_ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(btnDeleteScan_, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateAvg_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAvg_ActionPerformed
        doCreateAvg();
    }//GEN-LAST:event_btnCreateAvg_ActionPerformed

    private void btnUncheckAll_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAll_ActionPerformed
        doSetUncheckAll();
    }//GEN-LAST:event_btnUncheckAll_ActionPerformed

    private void btnDeleteScan_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteScan_ActionPerformed
        boolean allgood = false;

        while (allgood == false) {

            String retval = JOptionPane.showInputDialog(null,
                    "Enter the scan number to delete:",
                    "Delete Scan",
                    JOptionPane.QUESTION_MESSAGE);

            if (retval == null) {
                allgood = true;
            } else {
                try {
                    int scanID = Integer.parseInt(retval);

                    if (scanID > 0) {
                        allgood = true;
                        doRemoveScan(scanID);
                    }
                } catch (NumberFormatException ex) {
                    System.out.println("Invalid Scan #");
                }
            }
        }     
    }//GEN-LAST:event_btnDeleteScan_ActionPerformed

    

    

    private void removeSelected() {
        //TODO
        /*
         SwingUtilities.invokeLater(new Runnable() {
         @Override
         public void run() {
                
         //Get a list of all selected item
         List<CheckListShotItem> selectedItems = new ArrayList<>();
                
         int index = -1;
         for (int i = 0; i < listModel_.getSize(); i++) {
         CheckListShotItem shotItem = (CheckListShotItem) listModel_.getElementAt(i);
         if (shotItem.isSelected()) {
         selectedItems.add(shotItem);
         }
         }
                
         listModel_.remove(index);
         }
         });
         */
    }

    /*private void setUncheckAll(final boolean val) {

     SwingUtilities.invokeLater(new Runnable() {
     @Override
     public void run() {
     for (int i = 0; i < listModel_.getSize(); i++) {
     CheckListShotItem shotItem = (CheckListShotItem) listModel_.getElementAt(i);
     shotItem.setSelected(val);
     }
     }
     });
     }*/
    private void doSetUncheckAll() {

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i < listModel_.getSize(); i++) {
                    CheckListShotItem shotItem = (CheckListShotItem) listModel_.getElementAt(i);
                    shotItem.setSelected(false);
                    if (callbackListener_ != null) {
                        callbackListener_.doRemoveShotXYSeries(shotItem);
                    }
                }
            }
        });

    }

    private void doCreateAvg() {

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                logger_.info("Creating avg from highlighted shots...");
                
                StringBuilder name = new StringBuilder();

                CheckListShotItem newShotItem = new CheckListShotItem();

                boolean gotScanID = false;
                int[] selectedList = lstOfShots_.getSelectedIndices();
                for (int i = 0; i < selectedList.length; i++) {
                    CheckListShotItem shotItem = (CheckListShotItem) listModel_.getElementAt(selectedList[i]);
                    if (gotScanID == false) {
                        name.append("Scan " + shotItem.getScanID() + ": ");
                        gotScanID = true;
                    }
                    name.append(shotItem.getShotID());
                    name.append(",");

                    for (SpectrometerStackPanel.LaserResponse.Shot shot : shotItem.getShots()) {
                        newShotItem.addShot(shot);
                    }
                }

                //if (newShotItem.getShots().isEmpty()) {
                //    JOptionPane.showMessageDialog(null, "No shot data in highlighted shot(s).", "Create Shot Average", JOptionPane.ERROR_MESSAGE);
                //} else {
                String retval = JOptionPane.showInputDialog("Enter a name for the selected shots", name);

                if (retval != null) {
                    newShotItem.setName(retval);
                } else {
                    newShotItem.setName(name.toString());
                }
                listModel_.add(0, newShotItem);
                logger_.info("Create Avg from highlighted shots.... done");
                //}
            }
        });
    }

    public void doCreateScanAvg(int scanID) {

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {

                logger_.info("Creating Avg from scan ....");
                
                CheckListShotItem newShotItem = new CheckListShotItem();
                newShotItem.setName("Scan " + scanID + ": Avg");

                for (int i = 0; i < listModel_.getSize(); i++) {
                    CheckListShotItem shotItem = (CheckListShotItem) listModel_.getElementAt(i);

                    if (shotItem.getScanID() == scanID) {
                        for (SpectrometerStackPanel.LaserResponse.Shot shot : shotItem.getShots()) {
                            newShotItem.addShot(shot);
                        }
                    }
                }

                listModel_.add(0, newShotItem);

                if (callbackListener_ != null) {
                    callbackListener_.doShowShotXYSeries(newShotItem);
                }
                
                logger_.info("Create Avg from scan .... done");
            }
        });
    }

    public void doRemoveScan(int scanID) {

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                logger_.info("Removing scan " + scanID + " ....");
                int index = 0;
                int i = 0;
                while (index != (listModel_.getSize() -1)) {
                    for (i = 0; i < listModel_.getSize(); i++) {
                        index = i;
                        CheckListShotItem shotItem = (CheckListShotItem) listModel_.getElementAt(i);

                        if (shotItem.getScanID() == scanID) {
                            listModel_.removeElement(shotItem);
                            i--;
                        }
                    }
                }
                logger_.info("Removing scan " + scanID + " .... done");
            }
        });
    }

    public class CheckboxListCellRenderer extends JCheckBox implements ListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index,
                boolean isSelected, boolean cellHasFocus) {

            setComponentOrientation(list.getComponentOrientation());
            setFont(list.getFont());
            setOpaque(true);
            if (isSelected) {
                setBackground(Color.LIGHT_GRAY);
            } else {
                setBackground(list.getBackground());
            }
            setForeground(list.getForeground());

            setSelected(((CheckListShotItem) value).isSelected());

            setEnabled(list.isEnabled());

            setText(value == null ? "" : value.toString());

            return this;
        }
    }

    public void addItem(int index, CheckListShotItem item) {
        listModel_.add(index, item);
    }

    public void addItem(CheckListShotItem item) {
        listModel_.addElement(item);
    }

    public void removeAllItem() {
        listModel_.removeAllElements();
    }

    public void addShotItemClickListener(LibzShotItemClickListenerCallback callback) {
        callbackListener_ = callback;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateAvg_;
    private javax.swing.JButton btnDeleteScan_;
    private javax.swing.JButton btnUncheckAll_;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstOfShots_;
    // End of variables declaration//GEN-END:variables
}
